name: Build Windows JavaScriptCore (JSC) dynamic libs

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: build-jsc-${{ github.ref }}
  cancel-in-progress: true

env:
  CONFIG: Release

jobs:
  build:
    name: ${{ matrix.target }}${{ matrix.abi && format(' ({0})', matrix.abi) || '' }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows host -> Windows .dll
          - os: windows-latest
            target: windows

    steps:
      - name: Checkout WebKit
        uses: actions/checkout@v4
        with:
          repository: WebKit/WebKit
          path: webkit
          fetch-depth: 1

      - name: Setup MSVC env (Windows)
        if: matrix.target == 'windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # ---------------------------
      # Windows 依赖
      # ---------------------------
      - name: Install deps (Windows via Chocolatey)
        if: matrix.target == 'windows'
        shell: pwsh
        run: |
          choco install -y strawberryperl cmake ninja gperf winflexbison3 python ruby nasm llvm

      # ---------------------------
      # Cache
      # ---------------------------
      - name: Cache WebKitBuild (incremental)
        uses: actions/cache@v4
        id: build-cache
        with:
          path: |
            webkit/WebKitBuild
          key: ${{ runner.os }}-jsc-${{ matrix.target }}-${{ matrix.abi || 'na' }}-${{ hashFiles('webkit/Tools/Scripts/build-jsc', 'webkit/Source/JavaScriptCore/**') }}
          restore-keys: |
            ${{ runner.os }}-jsc-${{ matrix.target }}-${{ matrix.abi || 'na' }}-${{ hashFiles('webkit/Tools/Scripts/build-jsc', 'webkit/Source/JavaScriptCore/**') }}

      # 判断缓存是否命中，跳过构建
      - name: echo cache hit
        if: steps.build-cache.outputs.cache-hit == 'true'
        run: echo "all outputs are cached:${{ toJson(steps.build-cache.outputs) }}"

      # ---------------------------
      # Build
      # ---------------------------

      - name: Debug LLVM builtins
        if: matrix.target == 'windows'
        shell: pwsh
        run: |
          Get-ChildItem "C:\Program Files\LLVM\lib\clang\" -Recurse | Where-Object { $_.Name -match "clang_rt.builtins" }

      - name: Build JSC (Windows)
        if: steps.build-cache.outputs.cache-hit != 'true' && matrix.target == 'windows'
        shell: pwsh
        working-directory: webkit
        run: |
          perl Tools/Scripts/build-jsc --jsc-only --Release --cmakeargs='-GNinja -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl  
          -DCMAKE_INCLUDE_PATH=Source/WTF -DCLANG_BUILTINS_LIBRARY="C:\Program Files\LLVM\lib\clang\20\lib\windows\clang_rt.builtins-x86_64.lib"'

      # ================= Upload Artifacts =================
      - name: Prepare artifacts for upload
        working-directory: webkit
        run: |
          mkdir -p artifact-dir
          tar -czf WebKitBuild.tar.gz WebKitBuild
          mv WebKitBuild.tar.gz artifact-dir/

      - name: Upload Windows artifacts
        if: matrix.target == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: jsc-windows-${{ matrix.arch }}
          path: |
            webkit/artifact-dir/WebKitBuild.tar.gz
